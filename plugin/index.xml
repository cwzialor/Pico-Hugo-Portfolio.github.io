<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Plugins on My New Hugo Site</title>
    <link>http://localhost:1313/plugin/</link>
    <description>Recent content in Plugins on My New Hugo Site</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="http://localhost:1313/plugin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://localhost:1313/plugin/notes/speaker-view/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/plugin/notes/speaker-view/</guid>
      <description>&lt;!--&#xA;&#x9;NOTE: You need to build the notes plugin after making changes to this file.&#xA;--&gt;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xA;&#x9;&lt;head&gt;&#xA;&#x9;&#x9;&lt;meta charset=&#34;utf-8&#34;&gt;&#xA;&#xA;&#x9;&#x9;&lt;title&gt;reveal.js - Speaker View&lt;/title&gt;&#xA;&#xA;&#x9;&#x9;&lt;style&gt;&#xA;&#x9;&#x9;&#x9;body {&#xA;&#x9;&#x9;&#x9;&#x9;font-family: Helvetica;&#xA;&#x9;&#x9;&#x9;&#x9;font-size: 18px;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;#current-slide,&#xA;&#x9;&#x9;&#x9;#upcoming-slide,&#xA;&#x9;&#x9;&#x9;#speaker-controls {&#xA;&#x9;&#x9;&#x9;&#x9;padding: 6px;&#xA;&#x9;&#x9;&#x9;&#x9;box-sizing: border-box;&#xA;&#x9;&#x9;&#x9;&#x9;-moz-box-sizing: border-box;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;#current-slide iframe,&#xA;&#x9;&#x9;&#x9;#upcoming-slide iframe {&#xA;&#x9;&#x9;&#x9;&#x9;width: 100%;&#xA;&#x9;&#x9;&#x9;&#x9;height: 100%;&#xA;&#x9;&#x9;&#x9;&#x9;border: 1px solid #ddd;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;#current-slide .label,&#xA;&#x9;&#x9;&#x9;#upcoming-slide .label {&#xA;&#x9;&#x9;&#x9;&#x9;position: absolute;&#xA;&#x9;&#x9;&#x9;&#x9;top: 10px;&#xA;&#x9;&#x9;&#x9;&#x9;left: 10px;&#xA;&#x9;&#x9;&#x9;&#x9;z-index: 2;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;#connection-status {&#xA;&#x9;&#x9;&#x9;&#x9;position: absolute;&#xA;&#x9;&#x9;&#x9;&#x9;top: 0;&#xA;&#x9;&#x9;&#x9;&#x9;left: 0;&#xA;&#x9;&#x9;&#x9;&#x9;width: 100%;&#xA;&#x9;&#x9;&#x9;&#x9;height: 100%;&#xA;&#x9;&#x9;&#x9;&#x9;z-index: 20;&#xA;&#x9;&#x9;&#x9;&#x9;padding: 30% 20% 20% 20%;&#xA;&#x9;&#x9;&#x9;&#x9;font-size: 18px;&#xA;&#x9;&#x9;&#x9;&#x9;color: #222;&#xA;&#x9;&#x9;&#x9;&#x9;background: #fff;&#xA;&#x9;&#x9;&#x9;&#x9;text-align: center;&#xA;&#x9;&#x9;&#x9;&#x9;box-sizing: border-box;&#xA;&#x9;&#x9;&#x9;&#x9;line-height: 1.4;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;.overlay-element {&#xA;&#x9;&#x9;&#x9;&#x9;height: 34px;&#xA;&#x9;&#x9;&#x9;&#x9;line-height: 34px;&#xA;&#x9;&#x9;&#x9;&#x9;padding: 0 10px;&#xA;&#x9;&#x9;&#x9;&#x9;text-shadow: none;&#xA;&#x9;&#x9;&#x9;&#x9;background: rgba( 220, 220, 220, 0.8 );&#xA;&#x9;&#x9;&#x9;&#x9;color: #222;&#xA;&#x9;&#x9;&#x9;&#x9;font-size: 14px;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;.overlay-element.interactive:hover {&#xA;&#x9;&#x9;&#x9;&#x9;background: rgba( 220, 220, 220, 1 );&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;#current-slide {&#xA;&#x9;&#x9;&#x9;&#x9;position: absolute;&#xA;&#x9;&#x9;&#x9;&#x9;width: 60%;&#xA;&#x9;&#x9;&#x9;&#x9;height: 100%;&#xA;&#x9;&#x9;&#x9;&#x9;top: 0;&#xA;&#x9;&#x9;&#x9;&#x9;left: 0;&#xA;&#x9;&#x9;&#x9;&#x9;padding-right: 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;#upcoming-slide {&#xA;&#x9;&#x9;&#x9;&#x9;position: absolute;&#xA;&#x9;&#x9;&#x9;&#x9;width: 40%;&#xA;&#x9;&#x9;&#x9;&#x9;height: 40%;&#xA;&#x9;&#x9;&#x9;&#x9;right: 0;&#xA;&#x9;&#x9;&#x9;&#x9;top: 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;/* Speaker controls */&#xA;&#x9;&#x9;&#x9;#speaker-controls {&#xA;&#x9;&#x9;&#x9;&#x9;position: absolute;&#xA;&#x9;&#x9;&#x9;&#x9;top: 40%;&#xA;&#x9;&#x9;&#x9;&#x9;right: 0;&#xA;&#x9;&#x9;&#x9;&#x9;width: 40%;&#xA;&#x9;&#x9;&#x9;&#x9;height: 60%;&#xA;&#x9;&#x9;&#x9;&#x9;overflow: auto;&#xA;&#x9;&#x9;&#x9;&#x9;font-size: 18px;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;.speaker-controls-time.hidden,&#xA;&#x9;&#x9;&#x9;&#x9;.speaker-controls-notes.hidden {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;display: none;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;.speaker-controls-time .label,&#xA;&#x9;&#x9;&#x9;&#x9;.speaker-controls-pace .label,&#xA;&#x9;&#x9;&#x9;&#x9;.speaker-controls-notes .label {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;text-transform: uppercase;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;font-weight: normal;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;font-size: 0.66em;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;color: #666;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;margin: 0;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;.speaker-controls-time, .speaker-controls-pace {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;border-bottom: 1px solid rgba( 200, 200, 200, 0.5 );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;margin-bottom: 10px;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;padding: 10px 16px;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;padding-bottom: 20px;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;cursor: pointer;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;.speaker-controls-time .reset-button {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;opacity: 0;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;float: right;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;color: #666;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;text-decoration: none;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;.speaker-controls-time:hover .reset-button {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;opacity: 1;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;.speaker-controls-time .timer,&#xA;&#x9;&#x9;&#x9;&#x9;.speaker-controls-time .clock {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;width: 50%;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;.speaker-controls-time .timer,&#xA;&#x9;&#x9;&#x9;&#x9;.speaker-controls-time .clock,&#xA;&#x9;&#x9;&#x9;&#x9;.speaker-controls-time .pacing .hours-value,&#xA;&#x9;&#x9;&#x9;&#x9;.speaker-controls-time .pacing .minutes-value,&#xA;&#x9;&#x9;&#x9;&#x9;.speaker-controls-time .pacing .seconds-value {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;font-size: 1.9em;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;.speaker-controls-time .timer {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;float: left;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;.speaker-controls-time .clock {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;float: right;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;text-align: right;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;.speaker-controls-time span.mute {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;opacity: 0.3;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;.speaker-controls-time .pacing-title {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;margin-top: 5px;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;.speaker-controls-time .pacing.ahead {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;color: blue;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;.speaker-controls-time .pacing.on-track {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;color: green;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;.speaker-controls-time .pacing.behind {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;color: red;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;.speaker-controls-notes {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;padding: 10px 16px;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;.speaker-controls-notes .value {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;margin-top: 5px;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;line-height: 1.4;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;font-size: 1.2em;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;/* Layout selectorÂ */&#xA;&#x9;&#x9;&#x9;#speaker-layout {&#xA;&#x9;&#x9;&#x9;&#x9;position: absolute;&#xA;&#x9;&#x9;&#x9;&#x9;top: 10px;&#xA;&#x9;&#x9;&#x9;&#x9;right: 10px;&#xA;&#x9;&#x9;&#x9;&#x9;color: #222;&#xA;&#x9;&#x9;&#x9;&#x9;z-index: 10;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;#speaker-layout select {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;position: absolute;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;width: 100%;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;height: 100%;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;top: 0;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;left: 0;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;border: 0;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;box-shadow: 0;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;cursor: pointer;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;opacity: 0;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;font-size: 1em;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;background-color: transparent;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;-moz-appearance: none;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;-webkit-appearance: none;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;-webkit-tap-highlight-color: rgba(0, 0, 0, 0);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;#speaker-layout select:focus {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;outline: none;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;box-shadow: none;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;.clear {&#xA;&#x9;&#x9;&#x9;&#x9;clear: both;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;/* Speaker layout: Wide */&#xA;&#x9;&#x9;&#x9;body[data-speaker-layout=&#34;wide&#34;] #current-slide,&#xA;&#x9;&#x9;&#x9;body[data-speaker-layout=&#34;wide&#34;] #upcoming-slide {&#xA;&#x9;&#x9;&#x9;&#x9;width: 50%;&#xA;&#x9;&#x9;&#x9;&#x9;height: 45%;&#xA;&#x9;&#x9;&#x9;&#x9;padding: 6px;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;body[data-speaker-layout=&#34;wide&#34;] #current-slide {&#xA;&#x9;&#x9;&#x9;&#x9;top: 0;&#xA;&#x9;&#x9;&#x9;&#x9;left: 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;body[data-speaker-layout=&#34;wide&#34;] #upcoming-slide {&#xA;&#x9;&#x9;&#x9;&#x9;top: 0;&#xA;&#x9;&#x9;&#x9;&#x9;left: 50%;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;body[data-speaker-layout=&#34;wide&#34;] #speaker-controls {&#xA;&#x9;&#x9;&#x9;&#x9;top: 45%;&#xA;&#x9;&#x9;&#x9;&#x9;left: 0;&#xA;&#x9;&#x9;&#x9;&#x9;width: 100%;&#xA;&#x9;&#x9;&#x9;&#x9;height: 50%;&#xA;&#x9;&#x9;&#x9;&#x9;font-size: 1.25em;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;/* Speaker layout: Tall */&#xA;&#x9;&#x9;&#x9;body[data-speaker-layout=&#34;tall&#34;] #current-slide,&#xA;&#x9;&#x9;&#x9;body[data-speaker-layout=&#34;tall&#34;] #upcoming-slide {&#xA;&#x9;&#x9;&#x9;&#x9;width: 45%;&#xA;&#x9;&#x9;&#x9;&#x9;height: 50%;&#xA;&#x9;&#x9;&#x9;&#x9;padding: 6px;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;body[data-speaker-layout=&#34;tall&#34;] #current-slide {&#xA;&#x9;&#x9;&#x9;&#x9;top: 0;&#xA;&#x9;&#x9;&#x9;&#x9;left: 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;body[data-speaker-layout=&#34;tall&#34;] #upcoming-slide {&#xA;&#x9;&#x9;&#x9;&#x9;top: 50%;&#xA;&#x9;&#x9;&#x9;&#x9;left: 0;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;body[data-speaker-layout=&#34;tall&#34;] #speaker-controls {&#xA;&#x9;&#x9;&#x9;&#x9;padding-top: 40px;&#xA;&#x9;&#x9;&#x9;&#x9;top: 0;&#xA;&#x9;&#x9;&#x9;&#x9;left: 45%;&#xA;&#x9;&#x9;&#x9;&#x9;width: 55%;&#xA;&#x9;&#x9;&#x9;&#x9;height: 100%;&#xA;&#x9;&#x9;&#x9;&#x9;font-size: 1.25em;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;/* Speaker layout: Notes only */&#xA;&#x9;&#x9;&#x9;body[data-speaker-layout=&#34;notes-only&#34;] #current-slide,&#xA;&#x9;&#x9;&#x9;body[data-speaker-layout=&#34;notes-only&#34;] #upcoming-slide {&#xA;&#x9;&#x9;&#x9;&#x9;display: none;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;body[data-speaker-layout=&#34;notes-only&#34;] #speaker-controls {&#xA;&#x9;&#x9;&#x9;&#x9;padding-top: 40px;&#xA;&#x9;&#x9;&#x9;&#x9;top: 0;&#xA;&#x9;&#x9;&#x9;&#x9;left: 0;&#xA;&#x9;&#x9;&#x9;&#x9;width: 100%;&#xA;&#x9;&#x9;&#x9;&#x9;height: 100%;&#xA;&#x9;&#x9;&#x9;&#x9;font-size: 1.25em;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;@media screen and (max-width: 1080px) {&#xA;&#x9;&#x9;&#x9;&#x9;body[data-speaker-layout=&#34;default&#34;] #speaker-controls {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;font-size: 16px;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;@media screen and (max-width: 900px) {&#xA;&#x9;&#x9;&#x9;&#x9;body[data-speaker-layout=&#34;default&#34;] #speaker-controls {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;font-size: 14px;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;@media screen and (max-width: 800px) {&#xA;&#x9;&#x9;&#x9;&#x9;body[data-speaker-layout=&#34;default&#34;] #speaker-controls {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;font-size: 12px;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&lt;/style&gt;&#xA;&#x9;&lt;/head&gt;&#xA;&#xA;&#x9;&lt;body&gt;&#xA;&#xA;&#x9;&#x9;&lt;div id=&#34;connection-status&#34;&gt;Loading speaker view...&lt;/div&gt;&#xA;&#xA;&#x9;&#x9;&lt;div id=&#34;current-slide&#34;&gt;&lt;/div&gt;&#xA;&#x9;&#x9;&lt;div id=&#34;upcoming-slide&#34;&gt;&lt;span class=&#34;overlay-element label&#34;&gt;Upcoming&lt;/span&gt;&lt;/div&gt;&#xA;&#x9;&#x9;&lt;div id=&#34;speaker-controls&#34;&gt;&#xA;&#x9;&#x9;&#x9;&lt;div class=&#34;speaker-controls-time&#34;&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&lt;h4 class=&#34;label&#34;&gt;Time &lt;span class=&#34;reset-button&#34;&gt;Click to Reset&lt;/span&gt;&lt;/h4&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&lt;div class=&#34;clock&#34;&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span class=&#34;clock-value&#34;&gt;0:00 AM&lt;/span&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&lt;/div&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&lt;div class=&#34;timer&#34;&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span class=&#34;hours-value&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;minutes-value&#34;&gt;:00&lt;/span&gt;&lt;span class=&#34;seconds-value&#34;&gt;:00&lt;/span&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&lt;/div&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&lt;div class=&#34;clear&#34;&gt;&lt;/div&gt;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&lt;h4 class=&#34;label pacing-title&#34; style=&#34;display: none&#34;&gt;Pacing â Time to finish current slide&lt;/h4&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&lt;div class=&#34;pacing&#34; style=&#34;display: none&#34;&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;span class=&#34;hours-value&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;minutes-value&#34;&gt;:00&lt;/span&gt;&lt;span class=&#34;seconds-value&#34;&gt;:00&lt;/span&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&lt;/div&gt;&#xA;&#x9;&#x9;&#x9;&lt;/div&gt;&#xA;&#xA;&#x9;&#x9;&#x9;&lt;div class=&#34;speaker-controls-notes hidden&#34;&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&lt;h4 class=&#34;label&#34;&gt;Notes&lt;/h4&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&lt;div class=&#34;value&#34;&gt;&lt;/div&gt;&#xA;&#x9;&#x9;&#x9;&lt;/div&gt;&#xA;&#x9;&#x9;&lt;/div&gt;&#xA;&#x9;&#x9;&lt;div id=&#34;speaker-layout&#34; class=&#34;overlay-element interactive&#34;&gt;&#xA;&#x9;&#x9;&#x9;&lt;span class=&#34;speaker-layout-label&#34;&gt;&lt;/span&gt;&#xA;&#x9;&#x9;&#x9;&lt;select class=&#34;speaker-layout-dropdown&#34;&gt;&lt;/select&gt;&#xA;&#x9;&#x9;&lt;/div&gt;&#xA;&#xA;&#x9;&#x9;&lt;script&gt;&#xA;&#xA;&#x9;&#x9;&#x9;(function() {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;var notes,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;notesValue,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentState,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentSlide,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;upcomingSlide,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layoutLabel,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layoutDropdown,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;pendingCalls = {},&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;lastRevealApiCallId = 0,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;connected = false&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;var connectionStatus = document.querySelector( &#39;#connection-status&#39; );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;var SPEAKER_LAYOUTS = {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#39;default&#39;: &#39;Default&#39;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#39;wide&#39;: &#39;Wide&#39;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#39;tall&#39;: &#39;Tall&#39;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#39;notes-only&#39;: &#39;Notes only&#39;&#xA;&#x9;&#x9;&#x9;&#x9;};&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;setupLayout();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;let openerOrigin;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;openerOrigin = window.opener.location.origin;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;catch ( error ) { console.warn( error ) }&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;// In order to prevent XSS, the speaker view will only run if its&#xA;&#x9;&#x9;&#x9;&#x9;// opener has the same origin as itself&#xA;&#x9;&#x9;&#x9;&#x9;if( window.location.origin !== openerOrigin ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;connectionStatus.innerHTML = &#39;Cross origin error.&lt;br&gt;The speaker window can only be opened from the same origin.&#39;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;var connectionTimeout = setTimeout( function() {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;connectionStatus.innerHTML = &#39;Error connecting to main window.&lt;br&gt;Please try closing and reopening the speaker view.&#39;;&#xA;&#x9;&#x9;&#x9;&#x9;}, 5000 );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;window.addEventListener( &#39;message&#39;, function( event ) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// Validate the origin of all messages to avoid parsing messages&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// that aren&#39;t meant for us. Ignore when running off file:// so&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// that the speaker view continues to work without a web server.&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if( window.location.origin !== event.origin &amp;&amp; window.location.origin !== &#39;file://&#39; ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;clearTimeout( connectionTimeout );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;connectionStatus.style.display = &#39;none&#39;;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var data = JSON.parse( event.data );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// The overview mode is only useful to the reveal.js instance&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// where navigation occurs so we don&#39;t sync it&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if( data.state ) delete data.state.overview;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// Messages sent by the notes plugin inside of the main window&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if( data &amp;&amp; data.namespace === &#39;reveal-notes&#39; ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if( data.type === &#39;connect&#39; ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;handleConnectMessage( data );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if( data.type === &#39;state&#39; ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;handleStateMessage( data );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if( data.type === &#39;return&#39; ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;pendingCalls[data.callId](data.result);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;delete pendingCalls[data.callId];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// Messages sent by the reveal.js inside of the current slide preview&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else if( data &amp;&amp; data.namespace === &#39;reveal&#39; ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if( /ready/.test( data.eventName ) ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// Send a message back to notify that the handshake is complete&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;window.opener.postMessage( JSON.stringify({ namespace: &#39;reveal-notes&#39;, type: &#39;connected&#39;} ), &#39;*&#39; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if( /slidechanged|fragmentshown|fragmenthidden|paused|resumed/.test( data.eventName ) &amp;&amp; currentState !== JSON.stringify( data.state ) ) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;dispatchStateToMainWindow( data.state );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;} );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;/**&#xA;&#x9;&#x9;&#x9;&#x9; * Updates the presentation in the main window to match the state&#xA;&#x9;&#x9;&#x9;&#x9; * of the presentation in the notes window.&#xA;&#x9;&#x9;&#x9;&#x9; */&#xA;&#x9;&#x9;&#x9;&#x9;const dispatchStateToMainWindow = debounce(( state ) =&gt; {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;window.opener.postMessage( JSON.stringify({ method: &#39;setState&#39;, args: [ state ]} ), &#39;*&#39; );&#xA;&#x9;&#x9;&#x9;&#x9;}, 500);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;/**&#xA;&#x9;&#x9;&#x9;&#x9; * Asynchronously calls the Reveal.js API of the main frame.&#xA;&#x9;&#x9;&#x9;&#x9; */&#xA;&#x9;&#x9;&#x9;&#x9;function callRevealApi( methodName, methodArguments, callback ) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var callId = ++lastRevealApiCallId;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;pendingCalls[callId] = callback;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;window.opener.postMessage( JSON.stringify( {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;namespace: &#39;reveal-notes&#39;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type: &#39;call&#39;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;callId: callId,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;methodName: methodName,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;arguments: methodArguments&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} ), &#39;*&#39; );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;/**&#xA;&#x9;&#x9;&#x9;&#x9; * Called when the main window is trying to establish a&#xA;&#x9;&#x9;&#x9;&#x9; * connection.&#xA;&#x9;&#x9;&#x9;&#x9; */&#xA;&#x9;&#x9;&#x9;&#x9;function handleConnectMessage( data ) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if( connected === false ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;connected = true;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setupIframes( data );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setupKeyboard();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setupNotes();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setupTimer();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setupHeartbeat();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;/**&#xA;&#x9;&#x9;&#x9;&#x9; * Called when the main window sends an updated state.&#xA;&#x9;&#x9;&#x9;&#x9; */&#xA;&#x9;&#x9;&#x9;&#x9;function handleStateMessage( data ) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// Store the most recently set state to avoid circular loops&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// applying the same state&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentState = JSON.stringify( data.state );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// No need for updating the notes in case of fragment changes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ( data.notes ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;notes.classList.remove( &#39;hidden&#39; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;notesValue.style.whiteSpace = data.whitespace;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if( data.markdown ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;notesValue.innerHTML = marked( data.notes );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;notesValue.innerHTML = data.notes;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;notes.classList.add( &#39;hidden&#39; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// Update the note slides&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentSlide.contentWindow.postMessage( JSON.stringify({ method: &#39;setState&#39;, args: [ data.state ] }), &#39;*&#39; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;upcomingSlide.contentWindow.postMessage( JSON.stringify({ method: &#39;setState&#39;, args: [ data.state ] }), &#39;*&#39; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;upcomingSlide.contentWindow.postMessage( JSON.stringify({ method: &#39;next&#39; }), &#39;*&#39; );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;// Limit to max one state update per X ms&#xA;&#x9;&#x9;&#x9;&#x9;handleStateMessage = debounce( handleStateMessage, 200 );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;/**&#xA;&#x9;&#x9;&#x9;&#x9; * Forward keyboard events to the current slide window.&#xA;&#x9;&#x9;&#x9;&#x9; * This enables keyboard events to work even if focus&#xA;&#x9;&#x9;&#x9;&#x9; * isn&#39;t set on the current slide iframe.&#xA;&#x9;&#x9;&#x9;&#x9; *&#xA;&#x9;&#x9;&#x9;&#x9; * Block F5 default handling, it reloads and disconnects&#xA;&#x9;&#x9;&#x9;&#x9; * the speaker notes window.&#xA;&#x9;&#x9;&#x9;&#x9; */&#xA;&#x9;&#x9;&#x9;&#x9;function setupKeyboard() {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;document.addEventListener( &#39;keydown&#39;, function( event ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if( event.keyCode === 116 || ( event.metaKey &amp;&amp; event.keyCode === 82 ) ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;event.preventDefault();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return false;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;currentSlide.contentWindow.postMessage( JSON.stringify({ method: &#39;triggerKey&#39;, args: [ event.keyCode ] }), &#39;*&#39; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;/**&#xA;&#x9;&#x9;&#x9;&#x9; * Creates the preview iframes.&#xA;&#x9;&#x9;&#x9;&#x9; */&#xA;&#x9;&#x9;&#x9;&#x9;function setupIframes( data ) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var params = [&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#39;receiver&#39;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#39;progress=false&#39;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#39;history=false&#39;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#39;transition=none&#39;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#39;autoSlide=0&#39;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#39;backgroundTransition=none&#39;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;].join( &#39;&amp;&#39; );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var urlSeparator = /\?/.test(data.url) ? &#39;&amp;&#39; : &#39;?&#39;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var hash = &#39;#/&#39; + data.state.indexh + &#39;/&#39; + data.state.indexv;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var currentURL = data.url + urlSeparator + params + &#39;&amp;scrollActivationWidth=false&amp;postMessageEvents=true&#39; + hash;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var upcomingURL = data.url + urlSeparator + params + &#39;&amp;scrollActivationWidth=false&amp;controls=false&#39; + hash;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentSlide = document.createElement( &#39;iframe&#39; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentSlide.setAttribute( &#39;width&#39;, 1280 );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentSlide.setAttribute( &#39;height&#39;, 1024 );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentSlide.setAttribute( &#39;src&#39;, currentURL );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;document.querySelector( &#39;#current-slide&#39; ).appendChild( currentSlide );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;upcomingSlide = document.createElement( &#39;iframe&#39; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;upcomingSlide.setAttribute( &#39;width&#39;, 640 );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;upcomingSlide.setAttribute( &#39;height&#39;, 512 );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;upcomingSlide.setAttribute( &#39;src&#39;, upcomingURL );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;document.querySelector( &#39;#upcoming-slide&#39; ).appendChild( upcomingSlide );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;/**&#xA;&#x9;&#x9;&#x9;&#x9; * Setup the notes UI.&#xA;&#x9;&#x9;&#x9;&#x9; */&#xA;&#x9;&#x9;&#x9;&#x9;function setupNotes() {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;notes = document.querySelector( &#39;.speaker-controls-notes&#39; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;notesValue = document.querySelector( &#39;.speaker-controls-notes .value&#39; );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;/**&#xA;&#x9;&#x9;&#x9;&#x9; * We send out a heartbeat at all times to ensure we can&#xA;&#x9;&#x9;&#x9;&#x9; * reconnect with the main presentation window after reloads.&#xA;&#x9;&#x9;&#x9;&#x9; */&#xA;&#x9;&#x9;&#x9;&#x9;function setupHeartbeat() {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;setInterval( () =&gt; {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;window.opener.postMessage( JSON.stringify({ namespace: &#39;reveal-notes&#39;, type: &#39;heartbeat&#39;} ), &#39;*&#39; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}, 1000 );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;function getTimings( callback ) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;callRevealApi( &#39;getSlidesAttributes&#39;, [], function ( slideAttributes ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;callRevealApi( &#39;getConfig&#39;, [], function ( config ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var totalTime = config.totalTime;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var minTimePerSlide = config.minimumTimePerSlide || 0;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var defaultTiming = config.defaultTiming;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ((defaultTiming == null) &amp;&amp; (totalTime == null)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;callback(null);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// Setting totalTime overrides defaultTiming&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (totalTime) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;defaultTiming = 0;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var timings = [];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for ( var i in slideAttributes ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var slide = slideAttributes[ i ];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var timing = defaultTiming;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if( slide.hasOwnProperty( &#39;data-timing&#39; )) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var t = slide[ &#39;data-timing&#39; ];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;timing = parseInt(t);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if( isNaN(timing) ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;console.warn(&#34;Could not parse timing &#39;&#34; + t + &#34;&#39; of slide &#34; + i + &#34;; using default of &#34; + defaultTiming);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;timing = defaultTiming;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;timings.push(timing);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( totalTime ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// After we&#39;ve allocated time to individual slides, we summarize it and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// subtract it from the total time&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var remainingTime = totalTime - timings.reduce( function(a, b) { return a + b; }, 0 );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// The remaining time is divided by the number of slides that have 0 seconds&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// allocated at the moment, giving the average time-per-slide on the remaining slides&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var remainingSlides = (timings.filter( function(x) { return x == 0 }) ).length&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var timePerSlide = Math.round( remainingTime / remainingSlides, 0 )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// And now we replace every zero-value timing with that average&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;timings = timings.map( function(x) { return (x==0 ? timePerSlide : x) } );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var slidesUnderMinimum = timings.filter( function(x) { return (x &lt; minTimePerSlide) } ).length&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ( slidesUnderMinimum ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;message = &#34;The pacing time for &#34; + slidesUnderMinimum + &#34; slide(s) is under the configured minimum of &#34; + minTimePerSlide + &#34; seconds. Check the data-timing attribute on individual slides, or consider increasing the totalTime or minimumTimePerSlide configuration options (or removing some slides).&#34;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;alert(message);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;callback( timings );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;/**&#xA;&#x9;&#x9;&#x9;&#x9; * Return the number of seconds allocated for presenting&#xA;&#x9;&#x9;&#x9;&#x9; * all slides up to and including this one.&#xA;&#x9;&#x9;&#x9;&#x9; */&#xA;&#x9;&#x9;&#x9;&#x9;function getTimeAllocated( timings, callback ) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;callRevealApi( &#39;getSlidePastCount&#39;, [], function ( currentSlide ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var allocated = 0;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for (var i in timings.slice(0, currentSlide + 1)) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;allocated += timings[i];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;callback( allocated );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;/**&#xA;&#x9;&#x9;&#x9;&#x9; * Create the timer and clock and start updating them&#xA;&#x9;&#x9;&#x9;&#x9; * at an interval.&#xA;&#x9;&#x9;&#x9;&#x9; */&#xA;&#x9;&#x9;&#x9;&#x9;function setupTimer() {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var start = new Date(),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;timeEl = document.querySelector( &#39;.speaker-controls-time&#39; ),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;clockEl = timeEl.querySelector( &#39;.clock-value&#39; ),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;hoursEl = timeEl.querySelector( &#39;.hours-value&#39; ),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;minutesEl = timeEl.querySelector( &#39;.minutes-value&#39; ),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;secondsEl = timeEl.querySelector( &#39;.seconds-value&#39; ),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;pacingTitleEl = timeEl.querySelector( &#39;.pacing-title&#39; ),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;pacingEl = timeEl.querySelector( &#39;.pacing&#39; ),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;pacingHoursEl = pacingEl.querySelector( &#39;.hours-value&#39; ),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;pacingMinutesEl = pacingEl.querySelector( &#39;.minutes-value&#39; ),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;pacingSecondsEl = pacingEl.querySelector( &#39;.seconds-value&#39; );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var timings = null;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;getTimings( function ( _timings ) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;timings = _timings;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (_timings !== null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;pacingTitleEl.style.removeProperty(&#39;display&#39;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;pacingEl.style.removeProperty(&#39;display&#39;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// Update once directly&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;_updateTimer();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// Then update every second&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setInterval( _updateTimer, 1000 );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} );&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;function _resetTimer() {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (timings == null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;start = new Date();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;_updateTimer();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// Reset timer to beginning of current slide&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;getTimeAllocated( timings, function ( slideEndTimingSeconds ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var slideEndTiming = slideEndTimingSeconds * 1000;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;callRevealApi( &#39;getSlidePastCount&#39;, [], function ( currentSlide ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var currentSlideTiming = timings[currentSlide] * 1000;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var previousSlidesTiming = slideEndTiming - currentSlideTiming;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var now = new Date();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;start = new Date(now.getTime() - previousSlidesTiming);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;_updateTimer();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;timeEl.addEventListener( &#39;click&#39;, function() {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;_resetTimer();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return false;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;function _displayTime( hrEl, minEl, secEl, time) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var sign = Math.sign(time) == -1 ? &#34;-&#34; : &#34;&#34;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;time = Math.abs(Math.round(time / 1000));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var seconds = time % 60;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var minutes = Math.floor( time / 60 ) % 60 ;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var hours = Math.floor( time / ( 60 * 60 )) ;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hrEl.innerHTML = sign + zeroPadInteger( hours );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (hours == 0) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hrEl.classList.add( &#39;mute&#39; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;hrEl.classList.remove( &#39;mute&#39; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;minEl.innerHTML = &#39;:&#39; + zeroPadInteger( minutes );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (hours == 0 &amp;&amp; minutes == 0) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;minEl.classList.add( &#39;mute&#39; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;minEl.classList.remove( &#39;mute&#39; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;secEl.innerHTML = &#39;:&#39; + zeroPadInteger( seconds );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;function _updateTimer() {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var diff, hours, minutes, seconds,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;now = new Date();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diff = now.getTime() - start.getTime();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;clockEl.innerHTML = now.toLocaleTimeString( &#39;en-US&#39;, { hour12: true, hour: &#39;2-digit&#39;, minute:&#39;2-digit&#39; } );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;_displayTime( hoursEl, minutesEl, secondsEl, diff );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (timings !== null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;_updatePacing(diff);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;function _updatePacing(diff) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;getTimeAllocated( timings, function ( slideEndTimingSeconds ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var slideEndTiming = slideEndTimingSeconds * 1000;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;callRevealApi( &#39;getSlidePastCount&#39;, [], function ( currentSlide ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var currentSlideTiming = timings[currentSlide] * 1000;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var timeLeftCurrentSlide = slideEndTiming - diff;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (timeLeftCurrentSlide &lt; 0) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;pacingEl.className = &#39;pacing behind&#39;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if (timeLeftCurrentSlide &lt; currentSlideTiming) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;pacingEl.className = &#39;pacing on-track&#39;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;pacingEl.className = &#39;pacing ahead&#39;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;_displayTime( pacingHoursEl, pacingMinutesEl, pacingSecondsEl, timeLeftCurrentSlide );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;/**&#xA;&#x9;&#x9;&#x9;&#x9; * Sets up the speaker view layout and layout selector.&#xA;&#x9;&#x9;&#x9;&#x9; */&#xA;&#x9;&#x9;&#x9;&#x9;function setupLayout() {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layoutDropdown = document.querySelector( &#39;.speaker-layout-dropdown&#39; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layoutLabel = document.querySelector( &#39;.speaker-layout-label&#39; );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// Render the list of available layouts&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for( var id in SPEAKER_LAYOUTS ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var option = document.createElement( &#39;option&#39; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;option.setAttribute( &#39;value&#39;, id );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;option.textContent = SPEAKER_LAYOUTS[ id ];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layoutDropdown.appendChild( option );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// Monitor the dropdown for changes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layoutDropdown.addEventListener( &#39;change&#39;, function( event ) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setLayout( layoutDropdown.value );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}, false );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// Restore any currently persisted layout&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;setLayout( getLayout() );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;/**&#xA;&#x9;&#x9;&#x9;&#x9; * Sets a new speaker view layout. The layout is persisted&#xA;&#x9;&#x9;&#x9;&#x9; * in local storage.&#xA;&#x9;&#x9;&#x9;&#x9; */&#xA;&#x9;&#x9;&#x9;&#x9;function setLayout( value ) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var title = SPEAKER_LAYOUTS[ value ];&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layoutLabel.innerHTML = &#39;Layout&#39; + ( title ? ( &#39;: &#39; + title ) : &#39;&#39; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layoutDropdown.value = value;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;document.body.setAttribute( &#39;data-speaker-layout&#39;, value );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// Persist locally&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if( supportsLocalStorage() ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;window.localStorage.setItem( &#39;reveal-speaker-layout&#39;, value );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;/**&#xA;&#x9;&#x9;&#x9;&#x9; * Returns the ID of the most recently set speaker layout&#xA;&#x9;&#x9;&#x9;&#x9; * or our default layout if none has been set.&#xA;&#x9;&#x9;&#x9;&#x9; */&#xA;&#x9;&#x9;&#x9;&#x9;function getLayout() {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if( supportsLocalStorage() ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var layout = window.localStorage.getItem( &#39;reveal-speaker-layout&#39; );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if( layout ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return layout;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// Default to the first record in the layouts hash&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for( var id in SPEAKER_LAYOUTS ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return id;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;function supportsLocalStorage() {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;localStorage.setItem(&#39;test&#39;, &#39;test&#39;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;localStorage.removeItem(&#39;test&#39;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;catch( e ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return false;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;function zeroPadInteger( num ) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var str = &#39;00&#39; + parseInt( num );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return str.substring( str.length - 2 );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;/**&#xA;&#x9;&#x9;&#x9;&#x9; * Limits the frequency at which a function can be called.&#xA;&#x9;&#x9;&#x9;&#x9; */&#xA;&#x9;&#x9;&#x9;&#x9;function debounce( fn, ms ) {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var lastTime = 0,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;timeout;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return function() {&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var args = arguments;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var context = this;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;clearTimeout( timeout );&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var timeSinceLastCall = Date.now() - lastTime;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if( timeSinceLastCall &gt; ms ) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;fn.apply( context, args );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;lastTime = Date.now();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;timeout = setTimeout( function() {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;fn.apply( context, args );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;lastTime = Date.now();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}, ms - timeSinceLastCall );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;})();&#xA;&#xA;&#x9;&#x9;&lt;/script&gt;&#xA;&#x9;&lt;/body&gt;&#xA;&lt;/html&gt;</description>
    </item>
  </channel>
</rss>
